/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild, } from '@angular/core';
import { ADSENSE_TOKEN } from './adsense-config';
var AdsenseComponent = /** @class */ (function () {
    function AdsenseComponent(config) {
        this.config = config;
        /**
         * can be manually set if you need all ads on a page to have same id page-xxx
         */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    /**
     * @return {?}
     */
    AdsenseComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var config = this.config;
        /**
         * @template T
         * @param {?} source
         * @param {?} defaultValue
         * @return {?}
         */
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    };
    /**
     * @return {?}
     */
    AdsenseComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    };
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     */
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     * @return {?}
     */
    AdsenseComponent.prototype.ngAfterViewInit = /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var res = this.push();
        if (res instanceof TypeError) {
            setTimeout(function () { return _this.push(); }, this.timeOutRetry);
        }
    };
    /**
     * @return {?}
     */
    AdsenseComponent.prototype.push = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            /** @type {?} */
            var adsbygoogle = window['adsbygoogle'];
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    };
    AdsenseComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ng2-adsense,ng-adsense',
                    template: "\n  <ins #ins class=\"adsbygoogle\"\n    [ngStyle]=\"{'display': display, 'width.px': width, 'height.px': height }\"\n    [attr.data-ad-client]=\"adClient\"\n    [attr.data-ad-slot]=\"adSlot\"\n    [attr.data-ad-format]=\"adFormat\"\n    [attr.data-ad-region]=\"adRegion\"\n    [attr.data-layout]=\"layout\"\n    [attr.data-adtest]=\"adtest\"\n    [attr.data-layout-key]=\"layoutKey\"\n    [attr.data-full-width-responsive]=\"fullWidthResponsive\">\n  </ins>\n  ",
                    preserveWhitespaces: false,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }] }
    ];
    /** @nocollapse */
    AdsenseComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [ADSENSE_TOKEN,] }] }
    ]; };
    AdsenseComponent.propDecorators = {
        adClient: [{ type: Input }],
        adSlot: [{ type: Input }],
        adFormat: [{ type: Input }],
        adRegion: [{ type: Input }],
        display: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        layout: [{ type: Input }],
        layoutKey: [{ type: Input }],
        pageLevelAds: [{ type: Input }],
        timeOutRetry: [{ type: Input }],
        adtest: [{ type: Input }],
        fullWidthResponsive: [{ type: Input }],
        ins: [{ type: ViewChild, args: ['ins',] }]
    };
    return AdsenseComponent;
}());
export { AdsenseComponent };
if (false) {
    /**
     * adsense account ca-pub-XXXXXXXXXXXXXXXX
     * @type {?}
     */
    AdsenseComponent.prototype.adClient;
    /**
     * ad slot/number
     * @type {?}
     */
    AdsenseComponent.prototype.adSlot;
    /** @type {?} */
    AdsenseComponent.prototype.adFormat;
    /**
     * can be manually set if you need all ads on a page to have same id page-xxx
     * @type {?}
     */
    AdsenseComponent.prototype.adRegion;
    /**
     * ins element display style
     * @type {?}
     */
    AdsenseComponent.prototype.display;
    /**
     * ins element height in px
     * @type {?}
     */
    AdsenseComponent.prototype.width;
    /**
     * ins element width in px
     * @type {?}
     */
    AdsenseComponent.prototype.height;
    /**
     * used for in-feed ads
     * @type {?}
     */
    AdsenseComponent.prototype.layout;
    /**
     * used for in-feed ads
     * @type {?}
     */
    AdsenseComponent.prototype.layoutKey;
    /**
     * enable page-level ads
     * @type {?}
     */
    AdsenseComponent.prototype.pageLevelAds;
    /**
     * on first load sometimes adsense is not ready
     * @type {?}
     */
    AdsenseComponent.prototype.timeOutRetry;
    /**
     * sets up some sort of google test ad
     * @type {?}
     */
    AdsenseComponent.prototype.adtest;
    /** @type {?} */
    AdsenseComponent.prototype.fullWidthResponsive;
    /** @type {?} */
    AdsenseComponent.prototype.ins;
    /** @type {?} */
    AdsenseComponent.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,