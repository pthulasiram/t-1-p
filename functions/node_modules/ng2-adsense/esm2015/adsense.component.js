/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Component, Inject, Input, ViewChild, } from '@angular/core';
import { ADSENSE_TOKEN } from './adsense-config';
export class AdsenseComponent {
    /**
     * @param {?} config
     */
    constructor(config) {
        this.config = config;
        /**
         * can be manually set if you need all ads on a page to have same id page-xxx
         */
        this.adRegion = 'page-' + Math.floor(Math.random() * 10000) + 1;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const config = this.config;
        /**
         * @template T
         * @param {?} source
         * @param {?} defaultValue
         * @return {?}
         */
        function use(source, defaultValue) {
            return config && source !== undefined ? source : defaultValue;
        }
        this.adClient = use(this.adClient, config.adClient);
        this.adSlot = use(this.adSlot, config.adSlot);
        this.adFormat = use(this.adFormat, config.adFormat || 'auto');
        this.display = use(this.display, config.display || 'block');
        this.width = use(this.width, config.width);
        this.height = use(this.height, config.height);
        this.layout = use(this.layout, config.layout);
        this.layoutKey = use(this.layoutKey, config.layoutKey);
        this.pageLevelAds = use(this.pageLevelAds, config.pageLevelAds);
        this.timeOutRetry = use(this.timeOutRetry, config.timeOutRetry || 200);
        this.adtest = use(this.adtest, config.adtest);
        this.fullWidthResponsive = use(this.fullWidthResponsive, config.fullWidthResponsive);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        /** @type {?} */
        const iframe = this.ins.nativeElement.querySelector('iframe');
        if (iframe && iframe.contentWindow) {
            iframe.src = 'about:blank';
            iframe.remove();
        }
    }
    /**
     * attempts to push the ad twice. Usually if one doesn't work the other
     * will depeding on if the browser has the adsense code cached and
     * if its the first page to be loaded
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const res = this.push();
        if (res instanceof TypeError) {
            setTimeout(() => this.push(), this.timeOutRetry);
        }
    }
    /**
     * @return {?}
     */
    push() {
        /** @type {?} */
        const p = {};
        if (this.pageLevelAds) {
            p.google_ad_client = this.adClient;
            p.enable_page_level_ads = true;
        }
        try {
            /** @type {?} */
            const adsbygoogle = window['adsbygoogle'];
            adsbygoogle.push(p);
            return true;
        }
        catch (e) {
            return e;
        }
    }
}
AdsenseComponent.decorators = [
    { type: Component, args: [{
                selector: 'ng2-adsense,ng-adsense',
                template: `
  <ins #ins class="adsbygoogle"
    [ngStyle]="{'display': display, 'width.px': width, 'height.px': height }"
    [attr.data-ad-client]="adClient"
    [attr.data-ad-slot]="adSlot"
    [attr.data-ad-format]="adFormat"
    [attr.data-ad-region]="adRegion"
    [attr.data-layout]="layout"
    [attr.data-adtest]="adtest"
    [attr.data-layout-key]="layoutKey"
    [attr.data-full-width-responsive]="fullWidthResponsive">
  </ins>
  `,
                preserveWhitespaces: false,
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
AdsenseComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [ADSENSE_TOKEN,] }] }
];
AdsenseComponent.propDecorators = {
    adClient: [{ type: Input }],
    adSlot: [{ type: Input }],
    adFormat: [{ type: Input }],
    adRegion: [{ type: Input }],
    display: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    layout: [{ type: Input }],
    layoutKey: [{ type: Input }],
    pageLevelAds: [{ type: Input }],
    timeOutRetry: [{ type: Input }],
    adtest: [{ type: Input }],
    fullWidthResponsive: [{ type: Input }],
    ins: [{ type: ViewChild, args: ['ins',] }]
};
if (false) {
    /**
     * adsense account ca-pub-XXXXXXXXXXXXXXXX
     * @type {?}
     */
    AdsenseComponent.prototype.adClient;
    /**
     * ad slot/number
     * @type {?}
     */
    AdsenseComponent.prototype.adSlot;
    /** @type {?} */
    AdsenseComponent.prototype.adFormat;
    /**
     * can be manually set if you need all ads on a page to have same id page-xxx
     * @type {?}
     */
    AdsenseComponent.prototype.adRegion;
    /**
     * ins element display style
     * @type {?}
     */
    AdsenseComponent.prototype.display;
    /**
     * ins element height in px
     * @type {?}
     */
    AdsenseComponent.prototype.width;
    /**
     * ins element width in px
     * @type {?}
     */
    AdsenseComponent.prototype.height;
    /**
     * used for in-feed ads
     * @type {?}
     */
    AdsenseComponent.prototype.layout;
    /**
     * used for in-feed ads
     * @type {?}
     */
    AdsenseComponent.prototype.layoutKey;
    /**
     * enable page-level ads
     * @type {?}
     */
    AdsenseComponent.prototype.pageLevelAds;
    /**
     * on first load sometimes adsense is not ready
     * @type {?}
     */
    AdsenseComponent.prototype.timeOutRetry;
    /**
     * sets up some sort of google test ad
     * @type {?}
     */
    AdsenseComponent.prototype.adtest;
    /** @type {?} */
    AdsenseComponent.prototype.fullWidthResponsive;
    /** @type {?} */
    AdsenseComponent.prototype.ins;
    /** @type {?} */
    AdsenseComponent.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRzZW5zZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZzItYWRzZW5zZS8iLCJzb3VyY2VzIjpbImFkc2Vuc2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUwsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxNQUFNLEVBQ04sS0FBSyxFQUdMLFNBQVMsR0FDVixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsYUFBYSxFQUFpQixNQUFNLGtCQUFrQixDQUFDO0FBb0JoRSxNQUFNLE9BQU8sZ0JBQWdCOzs7O0lBNEIzQixZQUNpQyxNQUFxQjtRQUFyQixXQUFNLEdBQU4sTUFBTSxDQUFlOzs7O1FBdEI3QyxhQUFRLEdBQUcsT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztJQXVCaEUsQ0FBQzs7OztJQUVMLFFBQVE7O2NBQ0EsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNOzs7Ozs7O1FBQzFCLFNBQVMsR0FBRyxDQUFJLE1BQVMsRUFBRSxZQUFlO1lBQ3hDLE9BQU8sTUFBTSxJQUFJLE1BQU0sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDO1FBQ2hFLENBQUM7UUFDRCxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE9BQU8s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QTBCOzs7OztJQUUxQixrQ0FBaUM7O0lBQ2pDLG9DQUEwQjs7Ozs7SUFFMUIsb0NBQW9FOzs7OztJQUVwRSxtQ0FBeUI7Ozs7O0lBRXpCLGlDQUF1Qjs7Ozs7SUFFdkIsa0NBQXdCOzs7OztJQUV4QixrQ0FBd0I7Ozs7O0lBRXhCLHFDQUEyQjs7Ozs7SUFFM0Isd0NBQStCOzs7OztJQUUvQix3Q0FBOEI7Ozs7O0lBRTlCLGtDQUF3Qjs7SUFFeEIsK0NBQXNDOztJQUN0QywrQkFBMkI7O0lBR3pCLGtDQUFvRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBRFNFTlNFX1RPS0VOLCBBZHNlbnNlQ29uZmlnIH0gZnJvbSAnLi9hZHNlbnNlLWNvbmZpZyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25nMi1hZHNlbnNlLG5nLWFkc2Vuc2UnLFxuICB0ZW1wbGF0ZTogYFxuICA8aW5zICNpbnMgY2xhc3M9XCJhZHNieWdvb2dsZVwiXG4gICAgW25nU3R5bGVdPVwieydkaXNwbGF5JzogZGlzcGxheSwgJ3dpZHRoLnB4Jzogd2lkdGgsICdoZWlnaHQucHgnOiBoZWlnaHQgfVwiXG4gICAgW2F0dHIuZGF0YS1hZC1jbGllbnRdPVwiYWRDbGllbnRcIlxuICAgIFthdHRyLmRhdGEtYWQtc2xvdF09XCJhZFNsb3RcIlxuICAgIFthdHRyLmRhdGEtYWQtZm9ybWF0XT1cImFkRm9ybWF0XCJcbiAgICBbYXR0ci5kYXRhLWFkLXJlZ2lvbl09XCJhZFJlZ2lvblwiXG4gICAgW2F0dHIuZGF0YS1sYXlvdXRdPVwibGF5b3V0XCJcbiAgICBbYXR0ci5kYXRhLWFkdGVzdF09XCJhZHRlc3RcIlxuICAgIFthdHRyLmRhdGEtbGF5b3V0LWtleV09XCJsYXlvdXRLZXlcIlxuICAgIFthdHRyLmRhdGEtZnVsbC13aWR0aC1yZXNwb25zaXZlXT1cImZ1bGxXaWR0aFJlc3BvbnNpdmVcIj5cbiAgPC9pbnM+XG4gIGAsXG4gIHByZXNlcnZlV2hpdGVzcGFjZXM6IGZhbHNlLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgQWRzZW5zZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqIGFkc2Vuc2UgYWNjb3VudCBjYS1wdWItWFhYWFhYWFhYWFhYWFhYWCAqL1xuICBASW5wdXQoKSBhZENsaWVudDogc3RyaW5nO1xuICAvKiogYWQgc2xvdC9udW1iZXIgKi9cbiAgQElucHV0KCkgYWRTbG90OiBzdHJpbmcgfCBudW1iZXI7XG4gIEBJbnB1dCgpIGFkRm9ybWF0OiBzdHJpbmc7XG4gIC8qKiBjYW4gYmUgbWFudWFsbHkgc2V0IGlmIHlvdSBuZWVkIGFsbCBhZHMgb24gYSBwYWdlIHRvIGhhdmUgc2FtZSBpZCBwYWdlLXh4eCAqL1xuICBASW5wdXQoKSBhZFJlZ2lvbiA9ICdwYWdlLScgKyBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKyAxO1xuICAvKiogaW5zIGVsZW1lbnQgZGlzcGxheSBzdHlsZSAqL1xuICBASW5wdXQoKSBkaXNwbGF5OiBzdHJpbmc7XG4gIC8qKiBpbnMgZWxlbWVudCBoZWlnaHQgaW4gcHggKi9cbiAgQElucHV0KCkgd2lkdGg6IG51bWJlcjtcbiAgLyoqIGlucyBlbGVtZW50IHdpZHRoIGluIHB4ICovXG4gIEBJbnB1dCgpIGhlaWdodDogbnVtYmVyO1xuICAvKiogdXNlZCBmb3IgaW4tZmVlZCBhZHMgKi9cbiAgQElucHV0KCkgbGF5b3V0OiBzdHJpbmc7XG4gIC8qKiB1c2VkIGZvciBpbi1mZWVkIGFkcyAqL1xuICBASW5wdXQoKSBsYXlvdXRLZXk6IHN0cmluZztcbiAgLyoqIGVuYWJsZSBwYWdlLWxldmVsIGFkcyAqL1xuICBASW5wdXQoKSBwYWdlTGV2ZWxBZHM6IGJvb2xlYW47XG4gIC8qKiBvbiBmaXJzdCBsb2FkIHNvbWV0aW1lcyBhZHNlbnNlIGlzIG5vdCByZWFkeSAqL1xuICBASW5wdXQoKSB0aW1lT3V0UmV0cnk6IG51bWJlcjtcbiAgLyoqIHNldHMgdXAgc29tZSBzb3J0IG9mIGdvb2dsZSB0ZXN0IGFkICovXG4gIEBJbnB1dCgpIGFkdGVzdDogc3RyaW5nO1xuICAvKiB1c2VkIGZvciBmbGV4aWJsZSBhZHMgKi9cbiAgQElucHV0KCkgZnVsbFdpZHRoUmVzcG9uc2l2ZTogYm9vbGVhbjtcbiAgQFZpZXdDaGlsZCgnaW5zJykgaW5zOiBhbnk7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQEluamVjdChBRFNFTlNFX1RPS0VOKSBwcml2YXRlIGNvbmZpZzogQWRzZW5zZUNvbmZpZyxcbiAgKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZztcbiAgICBmdW5jdGlvbiB1c2U8VD4oc291cmNlOiBULCBkZWZhdWx0VmFsdWU6IFQpOiBUIHtcbiAgICAgIHJldHVybiBjb25maWcgJiYgc291cmNlICE9PSB1bmRlZmluZWQgPyBzb3VyY2UgOiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIHRoaXMuYWRDbGllbnQgPSB1c2UodGhpcy5hZENsaWVudCwgY29uZmlnLmFkQ2xpZW50KTtcbiAgICB0aGlzLmFkU2xvdCA9IHVzZSh0aGlzLmFkU2xvdCwgY29uZmlnLmFkU2xvdCk7XG4gICAgdGhpcy5hZEZvcm1hdCA9IHVzZSh0aGlzLmFkRm9ybWF0LCBjb25maWcuYWRGb3JtYXQgfHwgJ2F1dG8nKTtcbiAgICB0aGlzLmRpc3BsYXkgPSB1c2UodGhpcy5kaXNwbGF5LCBjb25maWcuZGlzcGxheSB8fCAnYmxvY2snKTtcbiAgICB0aGlzLndpZHRoID0gdXNlKHRoaXMud2lkdGgsIGNvbmZpZy53aWR0aCk7XG4gICAgdGhpcy5oZWlnaHQgPSB1c2UodGhpcy5oZWlnaHQsIGNvbmZpZy5oZWlnaHQpO1xuICAgIHRoaXMubGF5b3V0ID0gdXNlKHRoaXMubGF5b3V0LCBjb25maWcubGF5b3V0KTtcbiAgICB0aGlzLmxheW91dEtleSA9IHVzZSh0aGlzLmxheW91dEtleSwgY29uZmlnLmxheW91dEtleSk7XG4gICAgdGhpcy5wYWdlTGV2ZWxBZHMgPSB1c2UodGhpcy5wYWdlTGV2ZWxBZHMsIGNvbmZpZy5wYWdlTGV2ZWxBZHMpO1xuICAgIHRoaXMudGltZU91dFJldHJ5ID0gdXNlKHRoaXMudGltZU91dFJldHJ5LCBjb25maWcudGltZU91dFJldHJ5IHx8IDIwMCk7XG4gICAgdGhpcy5hZHRlc3QgPSB1c2UodGhpcy5hZHRlc3QsIGNvbmZpZy5hZHRlc3QpO1xuICAgIHRoaXMuZnVsbFdpZHRoUmVzcG9uc2l2ZSA9IHVzZSh0aGlzLmZ1bGxXaWR0aFJlc3BvbnNpdmUsIGNvbmZpZy5mdWxsV2lkdGhSZXNwb25zaXZlKTtcbiAgfVxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBjb25zdCBpZnJhbWUgPSB0aGlzLmlucy5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lmcmFtZScpO1xuICAgIGlmIChpZnJhbWUgJiYgaWZyYW1lLmNvbnRlbnRXaW5kb3cpIHtcbiAgICAgIGlmcmFtZS5zcmMgPSAnYWJvdXQ6YmxhbmsnO1xuICAgICAgaWZyYW1lLnJlbW92ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBhdHRlbXB0cyB0byBwdXNoIHRoZSBhZCB0d2ljZS4gVXN1YWxseSBpZiBvbmUgZG9lc24ndCB3b3JrIHRoZSBvdGhlclxuICAgKiB3aWxsIGRlcGVkaW5nIG9uIGlmIHRoZSBicm93c2VyIGhhcyB0aGUgYWRzZW5zZSBjb2RlIGNhY2hlZCBhbmRcbiAgICogaWYgaXRzIHRoZSBmaXJzdCBwYWdlIHRvIGJlIGxvYWRlZFxuICAgKi9cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIGNvbnN0IHJlcyA9IHRoaXMucHVzaCgpO1xuICAgIGlmIChyZXMgaW5zdGFuY2VvZiBUeXBlRXJyb3IpIHtcbiAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5wdXNoKCksIHRoaXMudGltZU91dFJldHJ5KTtcbiAgICB9XG4gIH1cblxuICBwdXNoKCkge1xuICAgIGNvbnN0IHA6IGFueSA9IHt9O1xuICAgIGlmICh0aGlzLnBhZ2VMZXZlbEFkcykge1xuICAgICAgcC5nb29nbGVfYWRfY2xpZW50ID0gdGhpcy5hZENsaWVudDtcbiAgICAgIHAuZW5hYmxlX3BhZ2VfbGV2ZWxfYWRzID0gdHJ1ZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGFkc2J5Z29vZ2xlID0gd2luZG93WydhZHNieWdvb2dsZSddO1xuICAgICAgYWRzYnlnb29nbGUucHVzaChwKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJldHVybiBlO1xuICAgIH1cbiAgfVxufVxuXG4iXX0=